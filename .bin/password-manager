#!/usr/bin/env python3

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))
from utils import Script, ask, confirm, menu, notify, run

PASS_DIR = Path.home() / ".password-store"


def get_passwords():
    if not PASS_DIR.exists():
        return []
    passwords = []
    for file in PASS_DIR.rglob("*.gpg"):
        rel_path = file.relative_to(PASS_DIR)
        passwords.append(str(rel_path)[:-4])
    return sorted(passwords)


def show_password(name=None):
    if not name:
        passwords = get_passwords()
        if not passwords:
            print("No passwords found")
            return
        name = menu(passwords, "Select password:")
    if name:
        result = run(f"pass show {name}")
        if result:
            print(result)
        else:
            print(f"Failed to get password for {name}")


def copy_password(name=None):
    if not name:
        passwords = get_passwords()
        if not passwords:
            print("No passwords found")
            return
        name = menu(passwords, "Select password:")
    if name:
        result = run(f"pass show {name} | head -n1 | wl-copy")
        if result is not None:
            notify(f"Password copied", f"{name}")
        else:
            notify(f"Failed to copy", f"{name}")


def generate_password(name=None):
    if not name:
        name = ask("Password name")
    if not name:
        return
    
    result = run(f"pass generate {name} 20")
    if result:
        notify(f"Generated password", f"{name}")
        copy_password(name)
    else:
        print(f"Failed to generate password for {name}")


def insert_password(name=None):
    if not name:
        name = ask("Password name")
    if not name:
        return
    
    result = run(f"pass insert {name}")
    if result:
        notify(f"Added password", f"{name}")
    else:
        print(f"Failed to add password for {name}")


def edit_password(name=None):
    if not name:
        passwords = get_passwords()
        if not passwords:
            print("No passwords found")
            return
        name = menu(passwords, "Select password:")
    if name:
        run(f"pass edit {name}")


def remove_password(name=None):
    if not name:
        passwords = get_passwords()
        if not passwords:
            print("No passwords found")
            return
        name = menu(passwords, "Select password:")
    if name and confirm(f"Delete '{name}'?"):
        result = run(f"pass rm -f {name}")
        if result is not None:
            notify(f"Deleted password", f"{name}")


def list_passwords():
    passwords = get_passwords()
    if passwords:
        print("Available passwords:")
        for pwd in passwords:
            print(f"  â€¢ {pwd}")
    else:
        print("No passwords found")


def main():
    script = Script("Password Manager", "Manage passwords with pass")
    
    # Add CLI arguments
    script.add_arg('--list', action='store_true', help='List all passwords', handler=lambda _: list_passwords())
    script.add_arg('--show', metavar='NAME', help='Show password', handler=show_password)
    script.add_arg('--copy', metavar='NAME', help='Copy password to clipboard', handler=copy_password)
    script.add_arg('--generate', metavar='NAME', help='Generate password', handler=generate_password)
    script.add_arg('--insert', metavar='NAME', help='Insert password', handler=insert_password)
    script.add_arg('--edit', metavar='NAME', help='Edit password', handler=edit_password)
    script.add_arg('--remove', metavar='NAME', help='Remove password', handler=remove_password)
    
    # Add interactive menu options
    passwords = get_passwords()
    if not passwords:
        print("No passwords found. Initialize pass first:")
        print("1. gpg --gen-key")
        print("2. pass init your-email@example.com")
        return
    
    script.add_menu_option("Show", lambda: show_password())
    script.add_menu_option("Copy", lambda: copy_password())
    script.add_menu_option("Generate", lambda: generate_password())
    script.add_menu_option("Edit", lambda: edit_password())
    script.add_menu_option("Insert", lambda: insert_password())
    script.add_menu_option("Remove", lambda: remove_password())
    
    script.run()


if __name__ == "__main__":
    main()
